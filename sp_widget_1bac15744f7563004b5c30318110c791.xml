<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2018-11-14 11:40:35">
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script><![CDATA[function($scope, $rootScope) {
  var c = this;
	$scope.selectedColumns = '';
	$scope.globalSelected = '';
	$rootScope.$on('saveChosen', function(event,data) { 
$scope.data.updateColumns = true;
		console.log('Selected Columns '+$scope.selectedColumns);
		var columnsstring = $scope.globalSelected;
		$scope.data.columnstobeUpdated = columnsstring;
	$scope.server.update().then(function(){
		$rootScope.$emit('personalizationDone');
	});
		});
	$('#my-select').multiSelect(
		{
			
	afterSelect: function(values){
		if($scope.globalSelected)
	$scope.globalSelected = $scope.globalSelected+','+values
	else
	$scope.globalSelected =values	;
	console.log('after select'+$scope.globalSelected)},
	afterDeselect: function(values){
		$scope.globalSelected = RemoveDeselected($scope.globalSelected,values, ',' );
	console.log('Removed Selection'+$scope.globalSelected);},
	selectableHeader: "<div class='custom-header'>Available</div>",
  selectionHeader: "<div class='custom-header'>Selected</div>",
		dblClick: true
	
	});
	for(i = 0; i < $scope.data.columnDetails.length; i++){
	$('#my-select').multiSelect('addOption', { value: $scope.data.columnDetails[i].value, text: $scope.data.columnDetails[i].text, index: [i] });
}
	console.log(JSON.stringify($scope.data.selected));
		$('#my-select').multiSelect('select', $scope.data.selected);
	$scope.listmodal = {
		name: 'test'
	};
	$scope.listChanged = function(){
		var el = document.getElementsByTagName('select')[0];
	$scope.selectedColumns = getSelectValues(el);
		console.log($scope.selectedColumns);
	};
	
}
function getSelectValues(select) {
  var result = [];
  var options = select && select.options;
  var opt;

  for (var i=0, iLen=options.length; i<iLen; i++) {
    opt = options[i];

    if (opt.selected) {
      result.push(opt.value);
    }
  }
  return result;
}
function RemoveDeselected(list, value, separator) {
	console.log('list'+list);
  separator = separator || ",";
	//list = list.join(separator);
  var values = list;
  for(var i = 0 ; i < values.length ; i++) {
    if(values[i] == value) {
      values.splice(i, 1);
      return values.join(separator);
    }
  }
  return list;
}]]></client_script>
<controller_as>c</controller_as>
<css>
.ms-container{
  width: auto;
}

.ms-container:after{
  content: ".";
  display: block;
  height: 0;
  line-height: 0;
  font-size: 0;
  clear: both;
  min-height: 0;
  visibility: hidden;
}

.ms-container .ms-selectable, .ms-container .ms-selection{
  background: #fff;
  color: #555555;
  float: left;
  width: 45%;
}
.ms-container .ms-selection{
  float: right;
}

.ms-container .ms-list{
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  -webkit-transition: border linear 0.2s, box-shadow linear 0.2s;
  -moz-transition: border linear 0.2s, box-shadow linear 0.2s;
  -ms-transition: border linear 0.2s, box-shadow linear 0.2s;
  -o-transition: border linear 0.2s, box-shadow linear 0.2s;
  transition: border linear 0.2s, box-shadow linear 0.2s;
  border: 1px solid #ccc;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  position: relative;
  height: 200px;
  padding: 0;
  overflow-y: auto;
}

.ms-container .ms-list.ms-focus{
  border-color: rgba(82, 168, 236, 0.8);
  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
  outline: 0;
  outline: thin dotted \9;
}

.ms-container ul{
  margin: 0;
  list-style-type: none;
  padding: 0;
}

.ms-container .ms-optgroup-container{
  width: 100%;
}

.ms-container .ms-optgroup-label{
  margin: 0;
  padding: 5px 0px 0px 5px;
  cursor: pointer;
  color: #999;
}

.ms-container .ms-selectable li.ms-elem-selectable,
.ms-container .ms-selection li.ms-elem-selection{
  border-bottom: 1px #eee solid;
  padding: 2px 10px;
  color: #555;
  font-size: 14px;
}

.ms-container .ms-selectable li.ms-hover,
.ms-container .ms-selection li.ms-hover{
  cursor: pointer;
  color: #fff;
  text-decoration: none;
  background-color: #08c;
}

.ms-container .ms-selectable li.disabled,
.ms-container .ms-selection li.disabled{
  background-color: #eee;
  color: #aaa;
  cursor: text;
}
.border-rounded {
border-radius: 1rem;
width: 45%;
}</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>personalize_list</id>
<internal>false</internal>
<link/>
<name>Personalize List</name>
<option_schema/>
<public>false</public>
<roles/>
<script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
  data.table = input.table;
	data.view = input.view || 'default';
	data.selected = CheckPreference(data.table, data.view).split(',');
	console.log('selected'+data.selected);
	var columnArray =  [];
	data.fields = $sp.getListColumns(data.table, data.view);
		data.fields_array = data.fields.split(',');
	var grForLabels = new GlideRecord(data.table);
	for (var i in data.fields_array) {
		console.log('going here');
		var field = data.fields_array[i];
		var ge = grForLabels.getElement(field);
		if (ge == null)
			continue;
		var dataobj = {};
		dataobj.value = field.toString();
		dataobj.text = ge.getLabel().toString();
		columnArray.push(dataobj);
	}

	data.columnDetails = columnArray;
if(input.updateColumns){
	updatePreference(data.table, data.view, input.columnstobeUpdated);
}
})();
function CheckPreference(table, view){
	var userPref = new GlideRecord('sys_user_preference');
		userPref.addQuery('name', table+'_'+view+'_list.view');
		userPref.addQuery('user', gs.getUserID());
		userPref.query();
		if (userPref.next()) {
return userPref.value;
		}
}
function updatePreference(table, view, columns){
	console.log('columns'+columns);
    var uprefApproval = new GlideRecord('sys_user_preference');
		uprefApproval.addQuery('name', table+'_'+view+'_list.view');
		uprefApproval.addQuery('user', gs.getUserID());
		uprefApproval.query();
		if (uprefApproval.next()) {
		  uprefApproval.value = columns;
			uprefApproval.update();
		} else {
			uprefApproval.initialize();
			uprefApproval.name = table+'_'+view+'_list.view';
			uprefApproval.user = gs.getUserID().toString();
			uprefApproval.value = columns;
			uprefApproval.insert();
		}
}]]></script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2018-11-13 09:06:23</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>1bac15744f7563004b5c30318110c791</sys_id>
<sys_mod_count>100</sys_mod_count>
<sys_name>Personalize List</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sp_widget_1bac15744f7563004b5c30318110c791</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2018-11-14 06:14:57</sys_updated_on>
<template><![CDATA[<script src="slushbucket.jsdbx"></script>
<script src="QuickSearch.jsdbx"></script>
<head>
 <!-- <link href="00cf8ff24f4a93004b5c30318110c799.cssdbx" rel="stylesheet" type="text/css">-->
</head>
<div align="centre">
 <!--  <input type='text' class='border-rounded' autocomplete='off' placeholder='' ng-model="listmodal" ng-change='startSearch()'><br><br> -->
 <select multiple="multiple" class="searchable" id='custom-headers' id="my-select" name="my-select[]" ng-model="listmodal" ng-change="listChanged()" >
  </select>
</div>]]></template>
</sp_widget>
</unload>
